[{"title":"Tcp_Wrappers防火墙","date":"2017-03-20T09:27:30.000Z","path":"2017/03/20/7tcp_wrappers防火墙/","text":"一、Linux Tcp_Wrappers Tcp_Wrappers是一个用来分析TCP/IP封包的软件，类似的IP封包软件还有iptables，linux默认都安装了此软件，作为一个安全的系统，Linux本身有两层安全防火墙，通过IP过滤机制的iptables实现第一层防护，iptables防火墙通过直观地监视系统的运行状况，阻挡网络中的一些恶意攻击，保护整个系统正常运行，免遭攻击和破坏。如果通过了第一层防护，那么下一层防护就是tcp_wrappers了，通过Tcp_Wrappers可以实现对系统中提供的某些服务的开放与关闭、允许和禁止，从而更有效地保证系统安全运行。 1）Tcp_Wrappers防火墙设置 1234567891011121314151617181920212223242526272829 Tcp_Wrappers的使用很简单，仅仅两个配置文件：/etc/hosts.allow和/etc/hosts.deny1. 查看系统是否安装了Tcp_Wrappers [root@localhost ~]#rpm -q tcp_wrappers tcp_wrappers-7.6-40.7.el5 如果有上面的类似输出，表示系统已经安装了tcp_wrappers模块。如果没有显示，可能是没有安装，可以从linux系统安装盘找到对应RPM包进行安装。 2. tcp_wrappers设定的规则 tcp_wrappers防火墙的实现是通过/etc/hosts.allow和/etc/hosts.deny两个文件来完成的文件格式是：服务列表 : 主机列表 : 选项1.服务列表是要支持的服务的名，例如：telnet、vsftpd等等。2.主机列表设定受控制的机器。这可以是机器名、主机IP，也可以使用通配符(*或？)或ALL及EXCEPT。3.选项是我们所要控制的动作。在服务与client都符合之后，那么真正所要进行的动作，就是选项在作。1）ALLOW 接受连接请求。2）DENY 拒绝连接请求。 举例：只允许118.126.3.222中vsftp登录（这里要注意的是关于vsftp的配置文件vsftpd.conf中的tcp_wrappers=YES这样vsftp才允许通过tcp_wrappers的机制对vsftp服务器进行访问控制。）输入vim /etc/hosts.allow 编辑 vsftpd:118.126.3.222:allow 表示允许118.126.3.222vsftp连接 输入vim /etc/hosts.deny 编辑 vsftpd：all 表示拒绝所有vsftp连接 一般情况下，linux会首先判断/etc/hosts.allow这个文件，如果远程登录的计算机满足文件/etc/hosts.allow设定的话，就不会去使用/etc/hosts.deny文件了，相反，如果不满足hosts.allow文件设定的规则的话，就会去使用hosts.deny文件了，如果满足hosts.deny的规则，此主机就被限制为不可访问linux服务器，如果也不满足hosts.deny的设定，此主机默认是可以访问 linux服务器的.","tags":[]},{"title":"Linux防火墙设置","date":"2017-03-12T08:27:30.000Z","path":"2017/03/12/6linux防火墙设置/","text":"一、Linux防火墙设置 iptables简介 netfilter/iptables（简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。 iptables基础 规则（rules）其实就是网络管理员预定义的条件，规则一般的定义为“如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息 包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规 则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的 主要工作就是添加、修改和删除这些规则。 1）Linux防火墙设置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104iptables(选项)(参数)-t&lt;表&gt;：指定要操纵的表； -A：向规则链中添加条目； -D：从规则链中删除条目； -i：向规则链中插入条目； -R：替换规则链中的条目； -L：显示规则链中已有的条目； -F：清楚规则链中已有的条目； -Z：清空规则链中的数据包计算器和字节计数器； -N：创建新的用户自定义规则链； -P：定义规则链中的默认目标； -h：显示帮助信息； -p：指定要匹配的数据包协议类型； -s：指定要匹配的数据包源ip地址； -j&lt;目标&gt;：指定要跳转的目标； -i&lt;网络接口&gt;：指定数据包进入本机的网络接口； -o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。iptables命令选项输入顺序：iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作表名包括： raw：高级功能，如：网址过滤。 mangle：数据包修改（QOS），用于实现服务质量。 net：地址转换，用于网关路由器。 filter：包过滤，用于防火墙规则。 规则链名包括： INPUT链：处理输入数据包。 OUTPUT链：处理输出数据包。 PORWARD链：处理转发数据包。 PREROUTING链：用于目标地址转换（DNAT）。 POSTOUTING链：用于源地址转换（SNAT）。 动作包括： accept：接收数据包。 DROP：丢弃数据包。 REDIRECT：重定向、映射、透明代理。 SNAT：源地址转换。 DNAT：目标地址转换。 MASQUERADE：IP伪装（NAT），用于ADSL。 LOG：日志记录。动作包括：accept：接收数据包。 DROP：丢弃数据包。 REDIRECT：重定向、映射、透明代理。 SNAT：源地址转换。DNAT：目标地址转换。 MASQUERADE：IP伪装（NAT），用于ADSL。 LOG：日志记录。案例iptables -F#清除预设表filter中的所有规则链的规则iptables -X#清除预设表filter中使用者自定链中的规则iptables -Z#把包以及流量计数器置零iptables -P INPUT DROP#将进口设置为阻止iptables -P FPRWARD DROP#将转发设置为阻止iptables -P OUTPUT DROP#将进口设置为阻止iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT#设置当连接状态为RELATED和ESTABLISHED时，允许数据进入服务器iptables -A INPUT -p icmp -j ACCEPT#允许pingiptables -A INPUT -i lo -j ACCEPT #允许本机iptables -A INPUT -s 10.10.0.0/16 -m state --state NEW -m tcp -p tcp --dport 16333 -j ACCEPT#允许来源10.10.0.0网段访问目标16333端口iptables -A INPUT -j REJECT --reject-with icmp-host-prohibited iptables -A FORWARD -j REJECT --reject-with icmp-host-prohibited #这两条的意思是在INPUT表和FORWARD表中拒绝所有其他不符合上述任何一条规则的数据包。并且发送一条host prohibited的消息给被拒绝的主机。iptables -A INPUT -s 10.10.0.0/16 -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT #允许来源10.10.0.0网段访问目标80端口iptables -A INPUT -s 172.16.0.0/16 -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT #允许来源172.16.0.0网段访问目标80端口iptables -A OUTPUT -d 10.147.229.126 -m state --state NEW -m tcp -p tcp --dport 2433 -j ACCEPT#允许目标10.147.229.126 IP 访问目标2433端口iptables -A OUTPUT -d 10.147.229.250 -m state --state NEW -m tcp -p tcp --dport 27017 -j ACCEPT #允许目标10.147.229.250 IP 访问目标27017端口iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT #设置状态为RELATED和ESTABLISHED的数据可以从服务器发送到外部iptables -A OUTPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT #允许从服务器ping外部/sbin/service iptables save#保存iptables策略","tags":[]},{"title":"Linux系统日志分析","date":"2017-03-10T08:27:30.000Z","path":"2017/03/10/5linux系统日志分析/","text":"一、Linux日志类型 二、Linux日志优先级 三、Linux常用日志文件 四、Linux日志文件详细介绍 Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 大部分Linux发行版默认的日志守护进程为 syslog，位于 /etc/syslog 或 /etc/syslogd 或/etc/rsyslog.d，默认配置文件为 /etc/syslog.conf 或 rsyslog.conf，任何希望生成日志的程序都可以向 syslog 发送信息。 Linux系统内核和许多程序会产生各种错误信息、警告信息和其他的提示信息，这些信息对管理员了解系统的运行状态是非常有用的，所以应该把它们写到日志文件中去。 完成这个过程的程序就是syslog。syslog可以根据日志的类别和优先级将日志保存到不同的文件中。 例如，为了方便查阅，可以把内核信息与其他信息分开，单独保存到一个独立的日志文件中。默认配置下，日志文件通常都保存在“/var/log”目录下。 1）Linux日志类型 1234567891011121314151617181920下面是常见的日志类型，但并不是所有的Linux发行版都包含这些类型： 类型 说明auth 用户认证时产生的日志，如login命令、su命令。authpriv 与 auth 类似，但是只能被特定用户查看。console 针对系统控制台的消息。cron 系统定期执行计划任务时产生的日志。daemon 某些守护进程产生的日志。ftp FTP服务。kern 系统内核消息。local0.local7 由自定义程序使用。lpr 与打印机活动有关。mail 邮件日志。mark 产生时间戳。系统每隔一段时间向日志文件中输出当前时间，每行的格式类似于 May 26 11:17:09 rs2 -- MARK --，可以由此推断系统发生故障的大概时间。news 网络新闻传输协议(nntp)产生的消息。ntp 网络时间协议(ntp)产生的消息。user 用户进程。uucp UUCP子系统。 2）Linux日志优先级1234567891011121314常见的日志优先级请见下标： 优先级 说明emerg 紧急情况，系统不可用（例如系统崩溃），一般会通知所有用户。alert 需要立即修复，例如系统数据库损坏。crit 危险情况，例如硬盘错误，可能会阻碍程序的部分功能。err 一般错误消息。warning 警告。notice 不是错误，但是可能需要处理。info 通用性消息，一般用来提供有用信息。debug 调试程序产生的信息。none 没有优先级，不记录任何日志消息。 3）Linux常用日志文件 1234567891011121314151617181920212223系统日志是由一个名为syslog的服务管理的，如以下日志文件都是由syslog日志服务驱动的：/var/log/boot.log：录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息/var/log/lastlog ：记录最后一次用户成功登陆的时间、登陆IP等信息/var/log/messages ：记录Linux操作系统常见的系统和服务错误信息/var/log/secure ：Linux系统安全日志，记录用户和工作组变坏情况、用户登陆认证情况/var/log/btmp ：记录Linux登陆失败的用户、时间以及远程IP地址/var/log/syslog：只记录警告信息，常常是系统出问题的信息，使用lastlog查看/var/log/wtmp：该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件，使用last命令查看/var/run/utmp：该日志文件记录有关当前登录的每个用户的信息。如 who、w、users、finger等就需要访问这个文件 /var/log/syslog 或 /var/log/messages 存储所有的全局系统活动数据，包括开机信息。基于 Debian 的系统如 Ubuntu 在 /var/log/syslog 中存储它们，而基于 RedHat 的系统如 RHEL 或 CentOS 则在 /var/log/messages 中存储它们。/var/log/auth.log 或 /var/log/secure 存储来自可插拔认证模块(PAM)的日志，包括成功的登录，失败的登录尝试和认证方式。Ubuntu 和 Debian 在 /var/log/auth.log 中存储认证信息，而 RedHat 和 CentOS 则在 /var/log/secure 中存储该信息。 4）Linux日志文件详细介绍 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/var/log/boot.log该文件记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息/var/log/syslog默认Centos，Fedora不生成该日志文件，但可以配置/etc/syslog.conf让系统生成该日志文件。它和/etc/log/messages日志文件不同，它只记录警告信息，常常是系统出问题的信息，所以更应该关注该文件。要让系统生成该日志文件，在/etc/syslog.conf文件中加上：*.warning /var/log/syslog 该日志文件能记录当用户登录时login记录下的错误口令、Sendmail的问题、su命令执行失败等信息。该日志文件记录最近成功登录的事件和最后一次不成功的登录事件，由login生成。在每次用户登录时被查询，该文件是二进制文件，需要使用lastlog命令查看，根据UID排序显示登录名、端口号和上次登录时间。如果某用户从来没有登录过，就显示为&quot;**Never logged in**&quot;。该命令只能以root权限执行。简单地输入lastlog命令后就会看到类似图4的信息：[root@TestStation etc]# lastlogUsername Port From Latestroot pts/0 110.87.109.232 Wed Nov 2 10:34:20 +0800 2016bin **Never logged in**daemon **Never logged in**adm **Never logged in**lp **Never logged in**sync **Never logged in**shutdown **Never logged in**halt **Never logged in**mail **Never logged in**uucp **Never logged in**operator **Never logged in**games **Never logged in**gopher **Never logged in**ftp **Never logged in**nobody **Never logged in**vcsa **Never logged in**saslauth **Never logged in**postfix **Never logged in**sshd **Never logged in**ntp **Never logged in**suda pts/2 222.79.79.120 Tue Oct 25 16:00:01 +0800 2016 /var/log/wtmp该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前显示用户的登录记录，last也能根据用户、终端tty或时间显示相应的记录。/var/run/utmp该日志文件记录有关当前登录的每个用户的信息。因此这个文件会随着用户登录和注销系统而不断变化，它只保留当时联机的用户记录，不会为用户保留永久的记录。系统中需要查询当前用户状态的程序，如 who、w、users、finger等就需要访问这个文件。该日志文件并不能包括所有精确的信息，因为某些突发错误会终止用户登录会话，而系统没有及时更新 utmp记录，因此该日志文件的记录不是百分之百值得信赖的。以上提及的3个文件(/var/log/wtmp、/var/run/utmp、/var/log/lastlog)是日志子系统的关键文件，都记录了用户登录的情况。这些文件的所有记录都包含了时间戳。这些文件是按二进制保存的，故不能用less、cat之类的命令直接查看这些文件，而是需要使用相关命令通过这些文件而查看。其中，utmp和wtmp文件的数据结构是一样的，而lastlog文件则使用另外的数据结构，关于它们的具体的数据结构可以使用man命令查询。每次有一个用户登录时，login程序在文件lastlog中查看用户的UID。如果存在，则把用户上次登录、注销时间和主机名写到标准输出中，然后login程序在lastlog中记录新的登录时间，打开utmp文件并插入用户的utmp记录。该记录一直用到用户登录退出时删除。utmp文件被各种命令使用，包括who、w、users和finger。下一步，login程序打开文件wtmp附加用户的utmp记录。当用户登录退出时，具有更新时间戳的同一utmp记录附加到文件中。wtmp文件被程序last使用。","tags":[]},{"title":"Linux审计策略和文件目录权限acl控制","date":"2017-02-15T08:27:30.000Z","path":"2017/02/15/4linux审计策略和文件目录权限acl控制/","text":"一、Linux安全审计工具auditd 二、文件和目录的权限机制 三、ACL访问控制 1）Linux安全审计工具auditd 1.安全防护是首先要考虑的问题。为了避免别人盗取我们的数据，我们需要时刻关注它。安全防护包括很多东西，审计是其中之一。 12345678910111213141516auditd（或 auditd 守护进程）是Linux审计系统中用户空间的一个组件，其负责将审计记录写入磁盘。安装完毕后将自动安装以下auditd和相关的工具：auditctl : 即时控制审计守护进程的行为的工具，比如如添加规则等等。/etc/audit/audit.rules : 记录审计规则的文件。aureport : 查看和生成审计报告的工具。ausearch : 查找审计事件的工具auditspd : 转发事件通知给其他应用程序，而不是写入到审计日志文件中。autrace : 一个用于跟踪进程的命令。/etc/audit/auditd.conf : auditd工具的配置文件。首次安装 auditd 后, 审计规则是空的。可以使用以下命令查看：[root@free tmp]# sudo auditctl -lNo rules 2.auditd添加查看审计规则12345678910111213141516171819202122232425262728293031323334353637需求是监控文件和目录的更改。使用auditd工具，我们可通过如下命令来配置(注意，以下命令需要root权限)。选项 :-w path : 指定要监控的路径，上面的命令指定了监控的文件路径 /etc/passwd-p : 指定触发审计的文件/目录的访问权限rwxa ： 指定的触发条件，r 读取权限，w 写入权限，x 执行权限，a 属性（attr）[root@chushihua ~]# sudo auditctl -w /etc/passwd -p rwxa以上命令将监控对 /production 目录 的所有访问。运行 auditctl -l 命令即可查看所有已配置的规则。[root@chushihua ~]# auditctl -lLIST_RULES: exit,always watch=/etc/passwd perm=rwxaLIST_RULES: exit,always watch=/production perm=rwxa我们已经添加规则监控 /etc/passwd 文件。现在可以使用 ausearch 工具的以下命令来查看审计日志了。[root@chushihua ~]# ausearch -f /etc/passwdtime-&gt;Wed Feb 8 00:53:10 2017type=PATH msg=audit(1486486390.757:442): item=0 name=&quot;/etc/passwd&quot; inode=1573826 dev=fd:00 mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:etc_t:s0type=CWD msg=audit(1486486390.757:442): cwd=&quot;/root&quot;type=SYSCALL msg=audit(1486486390.757:442): arch=c000003e syscall=2 success=yes exit=8 a0=7fa8a4cd169a a1=80000 a2=1b6 a3=0 items=1 ppid=3153 pid=3181 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts3 ses=24 comm=&quot;sudo&quot; exe=&quot;/usr/bin/sudo&quot; subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 key=(null)time : 审计时间。name : 审计对象cwd : 当前路径syscall : 相关的系统调用auid : 审计用户IDuid 和 gid : 访问文件的用户ID和用户组IDcomm : 用户访问文件的命令exe : 上面命令的可执行文件路径以上审计日志显示文件未被改动。 3.查看审计报告 Auditd提供了另一个工具叫 aureport ， aureport 是使用系统审计日志生成简要报告的工具。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101使用类似的命令来对目录进行审计，如下：[root@chushihua ~]# sudo auditctl -w /production/[root@chushihua ~]# sudo aureportSummary Report======================Range of time in logs: 02/06/2017 16:09:17.507 - 02/08/2017 01:24:02.606Selected time for report: 02/06/2017 16:09:17 - 02/08/2017 01:24:02.606Number of changes in configuration: 12Number of changes to accounts, groups, or roles: 76Number of logins: 13Number of failed logins: 5Number of authentications: 25Number of failed authentications: 11Number of users: 3Number of terminals: 17Number of host names: 2Number of executables: 25Number of files: 10Number of AVC&apos;s: 0Number of MAC events: 13Number of failed syscalls: 1Number of anomaly events: 0Number of responses to anomaly events: 0Number of crypto events: 141Number of keys: 0Number of process IDs: 267Number of events: 1730上图可以看出有 11 次授权失败。 使用aureport，我们可以深入查看这些信息。[root@chushihua ~]# sudo aureport -auAuthentication Report============================================# date time acct host term exe success event============================================1. 02/06/2017 16:13:05 root ? tty1 /bin/login yes 52. 02/06/2017 16:13:32 root 192.168.152.1 ssh /usr/sbin/sshd yes 163. 02/06/2017 16:13:32 root 192.168.152.1 ssh /usr/sbin/sshd yes 194. 02/06/2017 18:40:38 root 192.168.152.1 ssh /usr/sbin/sshd yes 555. 02/06/2017 18:40:38 root 192.168.152.1 ssh /usr/sbin/sshd yes 586. 02/06/2017 21:51:15 root 192.168.152.1 ssh /usr/sbin/sshd no 1667. 02/06/2017 21:51:15 root 192.168.152.1 ssh /usr/sbin/sshd no 1678. 02/06/2017 21:51:19 root 192.168.152.1 ssh /usr/sbin/sshd yes 1719. 02/06/2017 21:51:19 root 192.168.152.1 ssh /usr/sbin/sshd yes 17710. 02/07/2017 08:14:28 root 192.168.152.1 ssh /usr/sbin/sshd yes 111111. 02/07/2017 08:14:28 root 192.168.152.1 ssh /usr/sbin/sshd yes 111712. 02/07/2017 08:20:10 root ? tty1 /bin/login yes 513. 02/07/2017 08:21:46 ? 192.168.152.1 ssh /usr/sbin/sshd no 1714. 02/07/2017 08:21:46 (invalid user) 192.168.152.1 ssh /usr/sbin/sshd no 1815. 02/07/2017 08:21:57 root 192.168.152.1 ssh /usr/sbin/sshd yes 2716. 02/07/2017 08:21:57 root 192.168.152.1 ssh /usr/sbin/sshd yes 3017. 02/07/2017 10:09:59 root 192.168.152.1 ssh /usr/sbin/sshd yes 5618. 02/07/2017 10:09:59 root 192.168.152.1 ssh /usr/sbin/sshd yes 5919. 02/07/2017 12:26:52 wenji 192.168.152.1 ssh /usr/sbin/sshd no 9520. 02/07/2017 12:28:04 wenji 192.168.152.1 ssh /usr/sbin/sshd no 10521. 02/07/2017 12:28:04 wenji 192.168.152.1 ssh /usr/sbin/sshd no 10622. 02/07/2017 14:15:27 root 192.168.152.1 ssh /usr/sbin/sshd yes 15323. 02/07/2017 14:15:27 root 192.168.152.1 ssh /usr/sbin/sshd yes 15624. 02/07/2017 18:11:00 root 192.168.152.1 ssh /usr/sbin/sshd yes 24525. 02/07/2017 18:11:00 root 192.168.152.1 ssh /usr/sbin/sshd yes 24826. 02/07/2017 23:19:16 feilongtiantian 192.168.152.1 ssh /usr/sbin/sshd no 31427. 02/07/2017 23:19:16 feilongtiantian 192.168.152.1 ssh /usr/sbin/sshd no 31528. 02/07/2017 23:19:43 feilongtiantian 192.168.152.1 ssh /usr/sbin/sshd yes 32629. 02/07/2017 23:19:43 feilongtiantian 192.168.152.1 ssh /usr/sbin/sshd yes 32930. 02/08/2017 00:30:48 root 192.168.152.1 ssh /usr/sbin/sshd yes 35231. 02/08/2017 00:30:48 root 192.168.152.1 ssh /usr/sbin/sshd yes 35532. 02/08/2017 00:49:52 root 192.168.152.1 ssh /usr/sbin/sshd no 37033. 02/08/2017 00:49:52 root 192.168.152.1 ssh /usr/sbin/sshd no 37134. 02/08/2017 00:49:54 root 192.168.152.1 ssh /usr/sbin/sshd yes 37235. 02/08/2017 00:49:54 root 192.168.152.1 ssh /usr/sbin/sshd yes 37536. 02/08/2017 01:20:57 feitianlong ? pts/3 /bin/su yes 518从上图可以看出，用户在远程连接尝试登录失败。Auditd 配置文件我们已经添加如下规则：$ sudo auditctl -w /etc/passwd -p rwxa$ sudo auditctl -w /production/现在，如果确信这些规则可以正常工作，我们可以将其添加到/etc/audit/audit.rules中使得规则永久有效。# This file contains the auditctl rules that are loaded# whenever the audit daemon is started via the initscripts.# The rules are simply the parameters that would be passed# to auditctl.# First rule - delete all-D# Increase the buffers to survive stress events.# Make this bigger for busy systems-b 320# Feel free to add below this line. See auditctl man page-w /etc/passwd -p rwxa最后，别忘了重启auditd守护程序/etc/init.d/auditd restart 或者 service auditd restart 2）文件目录权限 Linux中的权限分为3种，分别是读（read）、写（write）和执行（execute），在系统中分别记作：r、w和x，或者用数字表示为4、2和1。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788权限对于文件的意义读：可查看文件的内容写：可修改文件的内容执行：可执行文件也可以这样修改权限：chmod 655 file ，第一位数字为文件所有者（u）赋权限，6=4+2 ，表示读和写权限；第二位数字为同组用户（g）赋权限,5 = 4 + 1，表示读和执行权限；第三位数字为其他用户（o）赋权限。各种权限数字组合如下：4：r2：w1：x3 = 2 + 1：wx5 = 4 + 1：rx6 = 4 + 2：rw7 = 4 + 2 + 1：rwx只有root和文件的所有者才有权改变文件的权限chmod命令详细用法使用方式 : chmod [-cfvR] [--help] [--version] mode file... 说明 : Linux/Unix 的档案调用权限分为三级 : 档案拥有者、群组、其他。利用 chmod 可以藉以控制档案如何被他人所调用。 参数 : mode : 权限设定字串，格式如下 : [ugoa...][[+-=][rwxX]...][,...]，其中 u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。 + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。 -c : 若该档案权限确实已经更改，才显示其更改动作 -f : 若该档案权限无法被更改也不要显示错误讯息 -v : 显示权限变更的详细资料 -R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) --help : 显示辅助说明 --version : 显示版本 范例 :将档案 file1.txt 设为所有人皆可读取 : chmod ugo+r file1.txt 将档案 file1.txt 设为所有人皆可读取 : chmod a+r file1.txt 将档案 file1.txt 与 file2.txt 设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 : chmod ug+w,o-w file1.txt file2.txt 将 ex1.py 设定为只有该档案拥有者可以执行 : chmod u+x ex1.py 将目前目录下的所有档案与子目录皆设为任何人可读取 : chmod -R a+r * 此外chmod也可以用数字来表示权限如 chmod 777 file 语法为：chmod abc file 其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。 r=4，w=2，x=1 若要rwx属性则4+2+1=7； 若要rw-属性则4+2=6； 若要r-x属性则4+1=7。 范例： chmod a=rwx file 和 chmod 777 file 效果相同 chmod ug=rwx,o=x file 和 chmod 771 file 效果相同 若用chmod 4755 filename可使此程序具有root的权限.指令名称 : chown 使用权限 : root 使用方式 : chmod [-cfhvR] [--help] [--version] user[] file... 说 明 : Linux/Unix 是多人多工作业系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由 系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才 有这样的权限。 user : 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群 体(group)-c : 若该档案拥有者确实已经更改，才显示其更改动作-f : 若该档案拥有者无法被更改也不要显示错误讯息-h : 只对于连结 (link)进行变更，而非该 link 真正指向的档案-v : 显示拥有者变更的详细资料-R : 对目前目录下的所有档案与子目录进行相同的拥有者 变更(即以递回的方式逐个变更)--help : 显示辅助说明--version : 显示版本 范例 : 将档案 file1.txt 的拥有者设为 users 群体的使用者 jessie : chown jessie:users file1.txt 将目前目录下的所有档案与子目录的拥有者皆设为 users 群体的使用者 lamport : chmod -R lamport:users * -rw------- (600) -- 只有属主有读写权限。 -rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。 -rwx------ (700) -- 只有属主有读、写、执行权限。 -rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 -rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。 -rw-rw-rw- (666) -- 所有用户都有文件读、写权限。 -rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。以下是对目录的两个普通设定: drwx------ (700) - 只有属主可在目录中读、写。 drwxr-xr-x (755) - 所有用户可读该目录，但只有属主才能改变目录中的内容。-------------------------------------------------------------------------- 3）ACL访问控制 有一种被称为访问控制列表(ACL)的权限控制方法，它是一种权限分配之外的普遍范式。例如，默认情况下你需要确认3个权限组：owner、group和other。而使用ACL，你可以增加权限给其他用户或组别，而不单只是简单的”other”或者是拥有者不存在的组别。可以允许指定的用户A、B、C拥有写权限而不再是让他们整个组拥有写权限。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115首先，我们需要安装工具来管理ACL。CentOS/Fedora/RHEL 中: yum -y install acl首先，我们检查ACL功能是否已经开启。[root@localhost ~]# mount/dev/mapper/VolGroup-lv_root on / type ext4 (rw,acl)proc on /proc type proc (rw)sysfs on /sys type sysfs (rw)devpts on /dev/pts type devpts (rw,gid=5,mode=620)tmpfs on /dev/shm type tmpfs (rw,rootcontext=&quot;system_u:object_r:tmpfs_t:s0&quot;)/dev/sda1 on /boot type ext4 (rw)none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)我的root分区中ACL属性已经开启。万一你没有开启，你需要编辑/etc/fstab文件，在你需要开启ACL的分区的选项前增加acl标记。# /etc/fstab# Created by anaconda on Mon Feb 13 19:30:34 2017## Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/mapper/VolGroup-lv_root / ext4 acl,defaults 1 1UUID=f740a6e7-de2e-404c-a4fa-728e9c0462de /boot ext4 defaults 1 2/dev/mapper/VolGroup-lv_swap swap swap defaults 0 0tmpfs /dev/shm tmpfs defaults 0 0devpts /dev/pts devpts gid=5,mode=620 0 0sysfs /sys sysfs defaults 0 0proc /proc proc defaults 0 0现在我们需要重新挂载分区,你必须也重新挂载它。[root@localhost ~]# sudo mount / -o remount基础ACL通过两条命令管理：setfacl用于增加或者修改ACL，getfacl用于显示分配完的ACL。setfacl命令格式：-m 表示修改ACL。你可以增加新的，或修改存在的ACLu: 表示用户。你可以使用 g 来设置组权限test 用户名:rwx 需要设置的权限。范例创建一个目录/shared给一个假设的用户名叫freeuser，授权test拥有完整权限。[root@localhost /]# mkdir shared[root@localhost /]# sudo setfacl -m u:test:rwx shared[root@localhost /]# ls -altotal 98dr-xr-xr-x. 23 root root 4096 Feb 14 02:33 .dr-xr-xr-x. 23 root root 4096 Feb 14 02:33 ..-rw-r--r--. 1 root root 0 Feb 13 20:15 .autofsckdr-xr-xr-x. 2 root root 4096 Feb 13 19:31 bindr-xr-xr-x. 5 root root 1024 Feb 13 19:33 bootdrwxr-xr-x. 18 root root 3740 Feb 13 20:15 devdrwxr-xr-x. 58 root root 4096 Feb 14 02:30 etcdrwxr-xr-x. 7 root root 4096 Feb 14 01:39 homedr-xr-xr-x. 8 root root 4096 Feb 13 19:31 libdr-xr-xr-x. 8 root root 12288 Feb 13 19:31 lib64drwx------. 2 root root 16384 Feb 13 19:30 lost+founddrwxr-xr-x. 2 root root 4096 Sep 23 2011 mediadrwxr-xr-x. 2 root root 4096 Sep 23 2011 mntdrwxr-xr-x. 2 root root 4096 Sep 23 2011 optdr-xr-xr-x. 90 root root 0 Feb 14 2017 procdr-xr-x---. 2 root root 4096 Feb 13 22:05 rootdr-xr-xr-x. 2 root root 4096 Feb 13 19:32 sbindrwxr-xr-x. 7 root root 0 Feb 14 2017 selinuxdrwxrwxr-x+ 2 root root 4096 Feb 14 02:33 shareddrwxr-xr-x. 2 root root 4096 Sep 23 2011 srvdrwxr-xr-x. 13 root root 0 Feb 14 2017 sysdrwxrwxrwt. 3 root root 4096 Feb 13 21:56 tmpdrwxr-xr-x. 13 root root 4096 Feb 13 19:30 usrdrwxr-xr-x. 17 root root 4096 Feb 13 19:30 var[root@localhost /]# sudo getfacl shared/# file: shared/# owner: root# group: rootuser::rwxuser:test:rwxgroup::r-xmask::rwxother::r-x擦除所有ACL条目：[root@localhost /]# lltotal 86dr-xr-xr-x. 2 root root 4096 Feb 13 19:31 bindr-xr-xr-x. 5 root root 1024 Feb 13 19:33 bootdrwxr-xr-x. 18 root root 3740 Feb 13 20:15 devdrwxr-xr-x. 58 root root 4096 Feb 14 02:30 etcdrwxr-xr-x. 7 root root 4096 Feb 14 01:39 homedr-xr-xr-x. 8 root root 4096 Feb 13 19:31 libdr-xr-xr-x. 8 root root 12288 Feb 13 19:31 lib64drwx------. 2 root root 16384 Feb 13 19:30 lost+founddrwxr-xr-x. 2 root root 4096 Sep 23 2011 mediadrwxr-xr-x. 2 root root 4096 Sep 23 2011 mntdrwxr-xr-x. 2 root root 4096 Sep 23 2011 optdr-xr-xr-x. 90 root root 0 Feb 14 2017 procdr-xr-x---. 2 root root 4096 Feb 13 22:05 rootdr-xr-xr-x. 2 root root 4096 Feb 13 19:32 sbindrwxr-xr-x. 7 root root 0 Feb 14 2017 selinuxdrwxr-xr-x. 2 root root 4096 Feb 14 02:33 shareddrwxr-xr-x. 2 root root 4096 Sep 23 2011 srvdrwxr-xr-x. 13 root root 0 Feb 14 2017 sysdrwxrwxrwt. 3 root root 4096 Feb 13 21:56 tmpdrwxr-xr-x. 13 root root 4096 Feb 13 19:30 usrdrwxr-xr-x. 17 root root 4096 Feb 13 19:30 var","tags":[]},{"title":"Linux账户管理审计策略和验证机制","date":"2017-02-13T06:27:57.000Z","path":"2017/02/13/3账户管理操作机制/","text":"一、Linux账号管理 二、pam用户认证机制 三、sudo命令 1）Linux账号管理 1.在linux中，用户帐号，用户密码，用户组信息和用户组密码都是存放在不同的配置文件中的。 1234/etc/passwd: 保存用户帐号和其相关信息(密码除外)。/etc/shadow: 保存用户的密码信息。/etc/group： 保存用户组的所有信息。/etc/gshadow: 保存用户组的密码信息。 在passwd文件中，一行定义一个用户帐号，每行均由多个不同的字段构成，各字段值间用”:”分隔，每个字段均代表该帐号某方面的信息。在刚安装完成的linux系统中，passwd配置文件已有很多帐号信息了，这些帐号是由系统自动创建的，他们是linux进程或部分服务程序正常工作所需要使用的账户，这些账户的最后一个字段的值一般为/sbin/nologin，表示该帐号不能用来登录linux系统12345678910111213141516171819在passwd配置文件中，从左至右各字段的对应关系及其含义：root:x:0:0:root:/root:/bin/bash第一字段：用户名（也被称为登录名）。第二字段：口令；由于passwd不再保存密码信息，所以用x占位代表。第三字段：用户id（UID）。第四字段：用户组id（GID）。第五字段：用户名全称，这是可选的，可以不设置。第六字段：用户的主目录所在位置。第七字段：用户所用shell的类型。 1234567891011121314151617181920212223242526在shadow配置文件中，从左至右各字段的对应关系及其含义：root:$6$WPaYJq7i85PSxMOi$euLreJACwh52RBY6ODfznis3GyLrd3M3kO4JBX.dbM/USA6WLYbnC66q3B3r7hqk3DFh 2PV.qWjVYKuw.TQUX/:17203:0:99999:7:::第一字段：用户名（也被称为登录名），和/etc/passwd是相同的，这样就把passwd 和shadow中用的用户记录联系在一起；这个字段是非空的；第二字段：密码（已被加密），如果是有些用户在这段是*，表示这个用户不能登录到系统；这个字段是非空的；第三字段：上次修改密码的时间；这个时间是从1970年01月01日算起到最近一次修改密码的时间间隔（天数）;第四字段：两次修改密码间隔最少的天数；如果设置为0,则禁用此功能；也就是说用户必须经过多少天才能修改其口令；第五字段：两次修改密码间隔最多的天数；这个能增强管理员管理用户口令的时效性；第六字段：提前多少天警告用户密码将过期；当用户登录系统后，系统登录程序提醒用户口令将要作废；第七字段：在密码过期之后多少天禁用此用户；第八字段：用户失效日期；此字段指定了用户作废的天数（从1970年的1月1日开始的天数），如果这个字段的值为空，帐号永久可用；第九字段：保留字段，目前为空；[注]： id为1时，采用md5进行加密；id为5时，采用SHA256进行加密；id为6时，采用SHA512进行加密； 123456789101112131415161718192021222324252627282930用户组在group配置文件中，从左至右各字段的对应关系及其含义：root:x:0:第一字段：是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。第二字段：字段存放的是用户组加密后的密码。一般为是x，因为密码存在/etc/gshadow。第三字段：与用户标识号类似，也是一个整数，被系统内部用来标识组。第四字段：是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。root UID:0 超级用户帐号，几乎没有任何约束并且不考虑其他所有的登陆，保护和许可；可以进入系统访问 daemon UID:1 控制后台进程的系统帐号 bin UID:2 管理大部分命令的帐号 sys UID:3 管理许多系统文件的帐号 adm UID:4 管理某些管理文件的帐号 lp UID:71 打印服务帐号 smtp UID:0 smtp邮件者使用简单网络管理协议。SMTP是INTERNET标准协议 uucp UID:5 为UNIX-to-UNIX拷贝程序（UUCP）捆绑数据文件和目标的帐号 nuucp UID:6 使用远程系统登陆到主机传送文件的帐号 listen UID:37 网络监听帐号 nobody UID:60001 匿名帐号，当独立于root用户建立一个需求时分派NFS服务器。nobody帐号分派软件进程时不需要任何特殊的权限。 noaccess UID:60002 需通过一些应用程序而不登陆系统时，为了访问系统而为一个用户或者进程分派的帐号 nobody4 UID:65534 SunOS4.0或者4.1的匿名帐号 12345678910111213141516171819202122232425262728293031在gshadow配置文件中，从左至右各字段的对应关系及其含义：root:*::第一字段：是用户组的名称，由字母或数字构成。与/etc/group中的登录名一样。第二字段：字段存放的是用户组加密后的密码。如果开头为！表示无合法密码。第三字段：用户组管理员的所属帐号。第四字段：该用户组所属帐号。与/etc/group中的一样一个账户可以有多个用户组，当前时刻所属的用户组成为有效用户组。查询当前有效用户组：~$ groupszsp adm cdrom sudo dip plugdev lpadmin sambashare此时创建的文件的用户组就所属有效用户组zsp。更改有效用户组：~$ newgrp test~$ groupstest zsp adm cdrom sudo dip plugdev lpadmin sambashare第一个列出的就是当前有效用户组 1234567891011121314151617/etc/sudoers除了 root 之外的其他账号，若想要使用 sudo 运行属于 root 的权限命令，则root 需要先使用 visudo 去修改 /etc/sudoers ，让该账号能够使用全部或部分的 root 命令功能。root ALL=(ALL:ALL) ALL第一字段：系统的哪个账号可以使用 sudo 这个命令的意思，默认为 root 这个账号；第二字段：当这个账号由哪部主机联机到本 Linux 主机， 这个配置值可以指定客户端计算机。默认值 root 可来自任何一部网络主机第三字段：这个账号可以切换成什么身份来下达后续的命令，默认 root 可以切换成任何人；第四字段：可用该身份使用的命令。默认 root 可以切换任何身份且进行任何命令之意。ALL 是特殊的关键词，代表任何身份、主机或命令的意思 2.用户、用户组管理操作详解：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115adduser 添加用户：adduser [-u uid][-g group][-d home][-s shell]-u:直接给出userID -g:直接给出GID-d:直接将根目录建立在已存在目录 -s:定义shell添加用户 xuexiadduser xuexi[root@chusihhua ~] sudo adduser xuexi[root@chusihhua ~] passwd xuexiChanging password for user xuexi.New password: BAD PASSWORD: it is too shortBAD PASSWORD: is too simpleRetype new password: passwd: all authentication tokens updated successfully.管理文件检验用户 xuexi 的添加是否成功：[root@chusihhua ~] tail -l /etc/passwdxuexi:x:602:602::/home/xuexi:/bin/bash[root@chusihhua ~] tail -l /etc/shadowxuexi:$6$DMpXCsfO$sEgamxi08Bq5QNXBdysBw43d0jCITG5.d5GVtHPY1rhklLsj3ed9mx6ldc/2ANatnXXt5.wHwriRPj5zx0ZGq.:17204:0:99999:7:::当我们新建用户时，通过 /etc/login.defs 和 /etc/default/useradd 两文件实现新用户的基本设置。cat /etc/login.defs[root@chusihhua ~] cat /etc/login.defs Please note that the parameters in this configuration file control the behavior of the tools from the shadow-utils component. None of these tools uses the PAM mechanism, and the utilities that use PAM (such as the passwd command) should therefore be configured elsewhere. Refer to /etc/pam.d/system-auth for more information. *REQUIRED* Directory where mailboxes reside, _or_ name of file, relative to the home directory. If you _do_ define both, MAIL_DIR takes precedence. QMAIL_DIR is for QmailQMAIL_DIR MaildirMAIL_DIR /var/spool/mail 邮件默认目录存放处MAIL_FILE .mail Password aging controls: PASS_MAX_DAYS Maximum number of days a password may be used. PASS_MIN_DAYS Minimum number of days allowed between password changes. PASS_MIN_LEN Minimum acceptable password length. PASS_WARN_AGE Number of days warning given before a password expires.PASS_MAX_DAYS 99999 密码需变更时间PASS_MIN_DAYS 0 密码多久需要更改PASS_MIN_LEN 5 密码最小长度PASS_WARN_AGE 7 密码失效之前几天发送警告信息 Min/max values for automatic uid selection in useraddUID_MIN 500 默认账号起始的最小uid数UID_MAX 60000 最大的uid数 Min/max values for automatic gid selection in groupaddGID_MIN 500 默认账号起始的最小gid数GID_MAX 60000 最大的gid数 If defined, this command is run when removing a user. It should remove any at/cron/print jobs etc. owned by the user to be removed (passed as the first argument).USERDEL_CMD /usr/sbin/userdel_local If useradd should create home directories for users by default On RH systems, we do. This option is overridden with the -m flag on useradd command line.CREATE_HOME yes The permission mask is initialized to this value. If not specified, the permission mask will be initialized to 022.UMASK 077 This enables userdel to remove user groups if no members exist.USERGROUPS_ENAB yes 是否建立用户根目录 Use SHA512 to encrypt password.ENCRYPT_METHOD SHA512 cat /etc/default/useradd[root@chushihua ~] cat /etc/default/useradd useradd defaults fileGROUP=100 用户群组默认为100HOME=/home 默认用户的根目录，新建的目录INACTIVE=-1 是否启动,-1表示启动EXPIRE= 是否设定到期时间，设一个数值，那么用户到期后就不能登录了SHELL=/bin/bash 默认的shellSKEL=/etc/skel 登录目录内容CREATE_MAIL_SPOOL=yes这个文件中SKEL这个选项指定用户的根目录内容是从 /etc/skel 这个目录下复制过去。 3.usermod 禁用、启用帐号：12345678910111213141516usermod -L [用户名] 禁用帐号usermod -U [用户名] 启用帐号usermod -e YYYY-MM-DD [用户名][root@chushihua ~] cat /etc/shadow |grep xuexixuexi:$6$DMpXCsfO$sEgamxi08Bq5QNXBdysBw43d0jCITG5.d5GVtHPY1rhklLsj3ed9mx6ldc/2ANatnXXt5.wHwriRPj5zx0ZGq.:17204:0:99999:7:::[root@chushihua ~] usermod -L xuexi[root@chushihua ~] cat /etc/shadow |grep xuexixuexi:!$6$DMpXCsfO$sEgamxi08Bq5QNXBdysBw43d0jCITG5.d5GVtHPY1rhklLsj3ed9mx6ldc/2ANatnXXt5.wHwriRPj5zx0ZGq.:17204:0:99999:7:::[root@chushihua ~] usermod -U xuexi[root@chushihua ~] cat /etc/shadow |grep xuexixuexi:$6$DMpXCsfO$sEgamxi08Bq5QNXBdysBw43d0jCITG5.d5GVtHPY1rhklLsj3ed9mx6ldc/2ANatnXXt5.wHwriRPj5zx0ZGq.:17204:0:99999:7:::usermod 命令禁用和启用账号通过在 /etc/shadow 中相应用户密码位之前添加和删除 &quot;!&quot; 实现的。 4.groupadd 创建组：12345678groupadd [-g gid [-o]] [-r] [-f] group[root@chushihua ~] groupadd projectca[root@chushihua ~] cat /etc/group |grep projectproject:x:603:[root@chushihua ~] groupadd -g 1050 project1[root@chushihua ~] cat /etc/group |grep project1project1:x:1050: 5.创建用户的时候指定用户属于那个用户组：12345usersadd -g group_name user_name[root@chushihua ~] useradd -g project1 xuexi1[root@chushihua ~] cat /etc/passwd |grep xuexi1xuexi1:x:603:1050::/home/xuexi1:/bin/bash 6.更改用户的用户组：12345678usermod –g group_name user_name[root@chushihua ~] cat /etc/group |grep project1project1:x:1050:[root@chushihua ~] usermod -g project1 xuexi[root@chushihua ~] cat /etc/passwd |grep xuexixuexi:x:602:1050::/home/xuexi:/bin/bashxuexi1:x:603:1050::/home/xuexi1:/bin/bash 2）pam用户认证机制 Linux-PAM(linux可插入认证模块)是一套共享库,使本地系统管理员可以随意选择程序的认证方式. 换句话说,不用(重新编写)重新编译一个包含PAM功能的应用程序,就可以改变它使用的认证机制. 这种方式下,就算升级本地认证机制,也不用修改程序.PAM使用配置/etc/pam.d/下的文件,来管理对程序的认证方式.应用程序 调用相应的配置文件,从而调用本地的认证模块.模块放置在/lib/security下,以加载动态库的形式进，像我们使用su命令时,系统会提示你输入root用户的密码.这就是su命令通过调用PAM模块实现的.1234567PAM认证一般遵循这样的顺序:1.用户开始执行/usr/bin/passwd 输入密码2.passwd调用pam模块进行验证3.pam模块会到/etc/pam.d中找寻与程序passwd同名的配置文件4.依据/etc/pamd.passwd 内的设置，引用相关的PAM模块逐步进行验证分析5.将验证结果（成功、失败以及其他信息）回传给passwd这个程序6.passwd这支程序会根据PAM回传的结果决定下一个操作（重新输入新密码或者通过验证）。 PAM认证的构成123456789简单地介绍它包括四种常见认证类型(module type)：1、认证管理（authentication management）检验用户的身份验证，进而对该用户的密码进行认证，并负责设置用户的一些秘密信息。2、帐户管理（account management）大部分是在进行授权，检验用户是否具有正确的权限。3、密码管理（password management）主要是用来修改用户的密码。4、会话管理（session management）通常记录用户登录与注销时的信息。 pam验证控制类型1234567required 此验证成功则带有success 若失败则带有 failure 但不论成功或失败都会继续后续的验证流程。 因此有利于数据的登录日志，这也是PAM最常使用required的原因requisite 若验证失败立刻回报原程序 failure，并终止后续流程，若验证成功则带有success标志并继续后续的流程。sufficient 验证成功立刻回传success给原程序,并终止后续的验证流程；若验证失败则带有failure 标志并继续后续的验证流程。optional 显示信息，并不是用在验证方面 PAM常用的模块类表123456789101112131415161718192021222324252627282930313233343536373839下面是Linux提供的PAM模块列表（只是其中一部分），这其中包含模块文件、模块功能描述和相关配置文件，具体如下：pam_access 提供logdaemon风格登录控制 /etc/security/access.confpam_chroot 提供类似chroot命令的功能pam_cracklib 对密码的强度进行一定的检查 库文件libcrack和字典文件/usr/lib/cracklib_dictpam_deny 总是无条件地使认证失败pam_env 设置取消环境变量 /etc/security/pam_env.confpam_filter 对输入输出流进行过滤 filterspam_ftp.so 对匿名ftp用户进行认证pam_group 当用户在指定的终端上请求指定的 /etc/security/group.conf服务时赋予该用户相应的组权限pam_issue 在提示用户输入用户名之前显示 /etc/issue/etc/issue文件的内容pam_krb4 对用户密码进行Kerberos认证相应的Kerberos库文件pam_lastlog 在用户登录成功后显示关于 /var/log/lastlog用户上次登录的信息，并维护/var/log/lastlog文件。pam_limits 限制用户会话所能使用的系统资源 /etc/security/limits.confpam_listfile 根据指定的某个文件决定是否 例如/etc/ftpusers允许或禁止提供服务pam_mail 检查用户的邮箱中是否有新邮件 /var/spool/mail/xxxxpam_mkhomedir 为用户建立主目录 /etc/skel/pam_motd 显示/etc/motd文件的内容 /etc/motdpam_nologin 根据/etc/nologin文件的存在与否 /etc/nologin来决定用户认证是否成功pam_permit 总是无条件地使认证成功pam_pwdb 作为pam_unix_xxxx模块的一个替代。/etc/pwdb.conf使用Password Database通用接口进行认证。pam_radius 提供远程身份验证拨入用户服务(RADIUS)的认证pam_rhosts_auth 利用文件~/.rhosts和/etc/hosts.equiv和~/.rhosts/etc/hosts.equiv对用户进行认证。pam_rootok 检查用户是否为超级用户，如果是超级用户(uid=0)则无条件地通过认证。pam_securetty 提供标准的Unix securetty检查 /etc/securettypam_time 提供基于时间的控制，比如限制 /etc/security/time.conf用户只能在某个时间段内才能登录pam_unix 提供标准的Unix认证 /etc/passwd和/etc/shadowpam_userdb 利用Berkeley DB数据库来检查用户/密码pam_warn 利用syslog( )记录一条告警信息pam_wheel 只允许wheel组的用户有超级用户的存取权限 3）sudo命令 123456789101112131415sudo命令用来以其他身份来执行命令，预设的身份为root。在/etc/sudoers中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。 语法 sudo(选项)(参数) 选项 -b：在后台执行指令； -h：显示帮助； -H：将HOME环境变量设为新身份的HOME环境变量； -k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。 -l：列出目前用户可执行与无法执行的指令； -p：改变询问密码的提示符号； -s：执行指定的shell； -u&lt;用户&gt;：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份； -v：延长密码有效期限5分钟； -V ：显示版本信息。 参数 指令：需要运行的指令和对应的参数。 实例 配置sudo必须通过编辑/etc/sudoers文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。 另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件： foobar chushihua=NOPASSWD: /bin/cat, /bin/ls [foobar@chushihua ~]$ sudo ls /rootanaconda-ks.cfg Desktop install.log install.log.syslog","tags":[]},{"title":"Linux服务启动配置文件的作用和流程","date":"2017-02-11T06:27:57.000Z","path":"2017/02/11/2linux服务启动配置文件的作用和流程/","text":"一、Centos6.4最小化安装系统服务的运行状态 二、启动服务详细介绍 三、Linux下chkconfig命令详解 四、服务的启动/关闭 ##1）Centos6.4最小化安装系统服务的运行状态获取开机启动服务，输入chkconfig –list 命令1234567891011121314151617[root@chushihua ~]# lsauditd 0:off 1:off 2:on 3:on 4:on 5:on 6:offblk-availability 0:off 1:on 2:on 3:on 4:on 5:on 6:offcrond 0:off 1:off 2:on 3:on 4:on 5:on 6:offip6tables 0:off 1:off 2:on 3:on 4:on 5:on 6:offiptables 0:off 1:off 2:on 3:on 4:on 5:on 6:offlvm2-monitor 0:off 1:on 2:on 3:on 4:on 5:on 6:offnetconsole 0:off 1:off 2:off 3:off 4:off 5:off 6:offnetfs 0:off 1:off 2:off 3:on 4:on 5:on 6:offnetwork 0:off 1:off 2:on 3:on 4:on 5:on 6:offpostfix 0:off 1:off 2:on 3:on 4:on 5:on 6:offrdisc 0:off 1:off 2:off 3:off 4:off 5:off 6:offrestorecond 0:off 1:off 2:off 3:off 4:off 5:off 6:offrsyslog 0:off 1:off 2:on 3:on 4:on 5:on 6:offsaslauthd 0:off 1:off 2:off 3:off 4:off 5:off 6:offsshd 0:off 1:off 2:on 3:on 4:on 5:on 6:offudev-post 0:off 1:on 2:on 3:on 4:on 5:on 6:off ##2）启动服务详细介绍1234567891011121314151617181920212223242526272829303132333435363738394041421.auditd(审核守护进程)Linux审计系统中用户空间的一个组件，其负责将审计记录写入磁盘。2.blk-availability(lvm2相关)3.crond(用于周期性执行一条或多条指令)4.ip6tables(ipv6的防火墙)5.iptables(ipv4的防火墙软件)6.lvm2-monitor(lvm监视)如果使用LVM逻辑卷管理就开启7.netconsole(初始化网络控制台登陆)8.netfs(网络中的共享文件空间)用于在系统启动时自动挂载网络中的共享文件空间，如NFS，Samba等。9.network(网络) 在系统启动时激活所有网络接口10.postfix(邮件服务器)如服务器不提供邮件服务，可关闭11.rdisc(预先加载)该服务通过预先加载特定的应用程序到内存中以提供性能。如果你想程序启动更快，就开启它。12.restorecond(监控文件)用于给 SELinux 监测和重新加载正确的文件上下文（file contexts）。它不是必须的，但如果你使用 SELinux 的话强烈建议开启它。13.rsyslog(日志服务器)提供系统的登录档案记录。14.saslauthd sasl认证服务相关,可关闭 15.sshd(远程登录)ssh服务端，可提供安全的shell连接，用于远程登录16.udev-post(设备管理)udev&quot;的用途是Fedora的设备管理系统，默认情况下&quot;udev&quot;支持很多个规则，用于设备的权限和行为管理，该服务允许用于保存用户应用的规则。 可关闭的服务 blk-availability netconsole lvm2-monitor netfs rdisc postfix saslauthd restorecond 执行运行级别目录下的所有的rc启动脚本，实际上都是一些链接文件12345678910111213141516171819[root@chushihua rc3.d]# lltotal 0lrwxrwxrwx. 1 root root 19 Feb 6 16:06 K10saslauthd -&gt; ../init.d/saslauthdlrwxrwxrwx. 1 root root 20 Feb 6 16:06 K50netconsole -&gt; ../init.d/netconsolelrwxrwxrwx. 1 root root 21 Feb 6 16:06 K87restorecond -&gt; ../init.d/restorecondlrwxrwxrwx. 1 root root 15 Feb 6 16:06 K89rdisc -&gt; ../init.d/rdisclrwxrwxrwx. 1 root root 22 Feb 6 16:07 S02lvm2-monitor -&gt; ../init.d/lvm2-monitorlrwxrwxrwx. 1 root root 19 Feb 6 16:06 S08ip6tables -&gt; ../init.d/ip6tableslrwxrwxrwx. 1 root root 18 Feb 6 16:06 S08iptables -&gt; ../init.d/iptableslrwxrwxrwx. 1 root root 17 Feb 6 16:06 S10network -&gt; ../init.d/networklrwxrwxrwx. 1 root root 16 Feb 6 16:07 S11auditd -&gt; ../init.d/auditdlrwxrwxrwx. 1 root root 17 Feb 6 16:06 S12rsyslog -&gt; ../init.d/rsysloglrwxrwxrwx. 1 root root 26 Feb 6 16:07 S25blk-availability -&gt; ../init.d/blk-availabilitylrwxrwxrwx. 1 root root 15 Feb 6 16:06 S25netfs -&gt; ../init.d/netfslrwxrwxrwx. 1 root root 19 Feb 6 16:06 S26udev-post -&gt; ../init.d/udev-postlrwxrwxrwx. 1 root root 14 Feb 6 16:07 S55sshd -&gt; ../init.d/sshdlrwxrwxrwx. 1 root root 17 Feb 6 16:06 S80postfix -&gt; ../init.d/postfixlrwxrwxrwx. 1 root root 15 Feb 6 16:06 S90crond -&gt; ../init.d/crondlrwxrwxrwx. 1 root root 11 Feb 6 16:06 S99local -&gt; ../rc.local 真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数123456789101112131415161718192021222324[root@chushihua init.d]# lltotal 136-rwxr-xr-x. 1 root root 3378 Jun 22 2012 auditd-r-xr-xr-x. 1 root root 1340 Feb 22 2013 blk-availability-rwxr-xr-x. 1 root root 2793 Jul 19 2011 crond-rw-r--r--. 1 root root 18216 Jan 9 2013 functions-rwxr-xr-x. 1 root root 5829 Jan 9 2013 halt-rwxr-xr-x. 1 root root 9515 Feb 22 2013 ip6tables-rwxr-xr-x. 1 root root 9409 Feb 22 2013 iptables-rwxr-xr-x. 1 root root 652 Jan 9 2013 killall-r-xr-xr-x. 1 root root 2134 Feb 22 2013 lvm2-lvmetad-r-xr-xr-x. 1 root root 2665 Feb 22 2013 lvm2-monitor-rwxr-xr-x. 1 root root 2989 Jan 9 2013 netconsole-rwxr-xr-x. 1 root root 5486 Jan 9 2013 netfs-rwxr-xr-x. 1 root root 6334 Jan 9 2013 network-rwxr-xr-x. 1 root root 3852 Dec 3 2011 postfix-rwxr-xr-x. 1 root root 1559 May 20 2009 rdisc-rwxr-xr-x. 1 root root 1822 Feb 22 2013 restorecond-rwxr-xr-x. 1 root root 2011 Jan 10 2013 rsyslog-rwxr-xr-x. 1 root root 1698 Feb 22 2013 sandbox-rwxr-xr-x. 1 root root 2056 Nov 20 2012 saslauthd-rwxr-xr-x. 1 root root 647 Jan 9 2013 single-rwxr-xr-x. 1 root root 4534 Feb 22 2013 sshd-rwxr-xr-x. 1 root root 2294 Feb 22 2013 udev-post ##3）chkconfig命令详解1234567891011121314151617181920212223242526272829303132333435363738394041424344chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。一、chkconfig 的使用语法1、chkconfig [--add][--del][--list][系统服务] 或 chkconfig [--level &lt;levels等级代号&gt;][系统服务][on/off/reset]2、参数用法： --add 增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。 --del 删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。 --level&lt;等级代号&gt; 指定读系统服务要在哪一个执行等级中开启或关毕。 等级0表示：表示关机 等级1表示：单用户模式 等级2表示：无网络连接的多用户命令行模式 等级3表示：有网络连接的多用户命令行模式 等级4表示：系统保留 等级5表示：带图形界面的多用户模式 等级6表示：重新启动 3、需要说明的是，level选项可以指定要查看的运行级而不一定是当前运行级。对于每个运行级，只能有一个启动脚本或者停止脚本。当切换运行级时，init不会重新启动已经启动的服务，也不会再次去停止已经停止的服务。4、chkconfig --list [name]：显示所有运行级系统服务的运行状态信息（on或off）。如果指定了name，那么只显示指定的服务在不同运行级的状态。5、chkconfig --add name：增加一项新的服务。chkconfig确保每个运行级有一项启动(S)或者杀死(K)入口。如有缺少，则会从缺省的init脚本自动建立。 chkconfig --del name：删除服务，并把相关符号连接从/etc/rc[0-6].d删除。 chkconfig [--level levels] name：设置某一服务在指定的运行级是被启动，停止还是重置。6、运行级文件：每个被chkconfig管理的服务需要在对应的init.d下的脚本加上两行或者更多行的注释。第一行告诉chkconfig缺省启动的运行级以及启动和停止的优先级。如果某服务缺省不在任何运行级启动，那么使用 - 代替运行级。第二行对服务进行描述，可以用\\ 跨行注释。例如，random.init包含三行：# chkconfig: 2345 20 80# description: Saves and restores system entropy pool for \\# higher quality random number generation.使用范例：chkconfig --list #列出所有的系统服务chkconfig --add httpd #增加httpd服务chkconfig --del httpd #删除httpd服务chkconfig --level 2345 httpd on #设置httpd在运行级别为2、3、4、5的情况下都是on（开启）的状态chkconfig --list #列出系统所有的服务启动情况chkconfig --list mysqld #列出mysqld服务设置情况chkconfig --level 35 mysqld on #设定mysqld在等级3和5为开机运行服务，--level 35表示操作只在等级3和5执行，on表示启动，off表示关闭chkconfig mysqld on #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级7、如何增加一个服务：以mysqld 为例(1)、服务脚本必须存放在/etc/init.d/目录下；(2)、chkconfig --add mysqld #添加服务，在chkconfig工具服务列表中增加此服务，此时服务会被在/etc/rc.d/rcN.d中赋予K/S入口；(3)、chkconfig --level 35 mysqld on # 修改服务的默认启动等级。 ##4）服务的启动和关闭123456789101112131415161718二、服务的启动/关闭1、系统服务：一直在内存中，而且一直在运行，并提供服务的被称为服务；2、而服务也是一个运行的程序，则这个运行的程序则被称为daemons；3、这些服务的启动脚本一般放置在： /etc/init.d4、在CentOS中服务启动脚本放置在：/etc/rc.d/init.d而/etc/init.d这个目录为公认的目录，在centos中/etc/init.d就是一个链接档案5、/etc/sysconfig 服务初始化环境变量配置都在这个档案中。6、/var/lib 各个服务产生的数据库都在这个目录下，最简单的在这里找到 mysql 使用 vim 打开就可以看到，你建立的数据库以及系统默认产生的数据库名称都在这里面！7、启动/停止/重启服务 ： /etc/init.d/ serverName start/stop /restart/status8、启动/停止/重启服务： service serverName start/stop/restart 为什么可以这样写？9、service 是一个script 他可以分析你后面下达的参数，然后根据你的参数在到/etc/init.d 下去取得正确的服务来 stop start restart","tags":[]},{"title":"Linux系统启动流程","date":"2017-02-10T06:27:57.000Z","path":"2017/02/10/1Linux系统启动/","text":"一、运行/sbin/init 二、读取/etc/inittab文件 三、初始化系统/etc/rc.d/rc.sysinit 四、启动对应运行级别的守护进程(/etc/rc.d/rc—&gt;/etc/rc.d/rc*.d/) 五、用户自定义引导程序（/etc/rc.d/rc.local） 六、启动终端和X-Window界面 七、登录系统启动完成 ##1）运行/sbin/initinit的进程号是1，init进程是系统所有进程的起点，Linux在完成核内引导以后，就开始运行init程序。 ##2）读取/etc/inittab文件init程序接着需要读取配置文件/etc/inittab。inittab是一个不可执行的文本文件，它有若干指令所组成。 在Rethat系统中，inittab内容如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@localhost etc]# vi inittab ## inittab This file describes how the INIT process should set up# the system in a certain run-level.## Author: Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;## inittab This file describes how the INIT process should set up# the system in a certain run-level.## Author: Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;# Modified for RHS Linux by Marc Ewing and Donnie Barnes## Default runlevel. The runlevels used by RHS are:# 0 - halt (Do NOT set initdefault to this)# 1 - Single user mode# 2 - Multiuser, without NFS (The same as 3, if you do not have networking)# 3 - Full multiuser mode# 4 - unused# 5 - X11# 6 - reboot (Do NOT set initdefault to this)#id:5:initdefault:# System initialization.si::sysinit:/etc/rc.d/rc.sysinitl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutesl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutes# of power left. Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powerd installed and your# UPS connected and working correctly.pf::powerfail:/sbin/shutdown -f -h +2 &quot;Power Failure; System Shutting Down&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;# Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6# Run xdm in runlevel 5x:5:respawn:/etc/X11/prefdm -nodaemon Runlevel 0 系统停机状态，系统默认运行级别不能设为0，否则不能正常启动（关机） Runlevel 1 单用户工作状态，root权限，用于系统维护，禁止远程登陆 Runlevel 2 多用户状态(没有NFS) Runlevel 3 完全的多用户状态(有NFS)，登陆后进入控制台命令行模式（服务器默认模式） Runlevel 4 系统未使用，保留 Runlevel 5 X11控制台，登陆后进入图形GUI模式 Runlevel 6 系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动（重启） ##3）初始化系统/etc/rc.d/rc.sysinit开始启动运行等级的服务前，检测与初始化系统环境，在/etc/inittab文件中有写。 它是一个bash shell脚本，是每一个运行级别都要首先运行的重要脚本。 它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。 （1）获取网络环境与主机类型。首先会读取网络环境设置文件”/etc/sysconfig/network”，获取主机名称与默认网关等网络环境。 （2）测试与载入内存设备/proc及usb设备/sys。除了/proc外，系统会主动检测是否有usb设备，并主动加载usb驱动，尝试载入usb文件系统。 （3）决定是否启动SELinux。 （4）接口设备的检测与即插即用（pnp）参数的测试。 （5）用户自定义模块的加载。用户可以再”/etc/sysconfig/modules/*.modules”加入自定义的模块，此时会加载到系统中。 （6）加载核心的相关设置。按”/etc/sysctl.conf”这个文件的设置值配置功能。 （7）设置系统时间（clock）。 （8）设置终端的控制台的字形。 （9）设置raid及LVM等硬盘功能。 （10）以方式查看检验磁盘文件系统。 （11）进行磁盘配额quota的转换。 （12）重新以读取模式载入系统磁盘。 （13）启动quota功能。 （14）启动系统随机数设备（产生随机数功能）。 （15）清除启动过程中的临时文件。 （16）将启动信息加载到”/var/log/dmesg”文件中。 ##4）启动对应运行级别的守护进程(/etc/rc.d/rc—&gt;/etc/rc.d/rc*.d/)在rc.sysinit执行后，将返回init继续其它的动作，通常接下来会执行到/etc/rc.d/rc程序。以运行级别3为例，init将执行配置文件inittab中的以下这行：1l5:5:wait:/etc/rc.d/rc 5 这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d /rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些链接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、 restart、status等参数。 /etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的链接文件，对于以以S开头的启动脚本，将以start参数来运行。而如果发现存在相应的脚本也存在K打头的链接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。12345678910111213141516171819202122232425262728[root@localhost rc0.d]# ls -al S01halt lrwxrwxrwx 1 root root 14 Jun 17 2016 S01halt -&gt; ../init.d/halt[root@localhost rc0.d]# runlevelN 5[root@localhost rc0.d]# vi /etc/rc.d/rc.sysinit [root@localhost rc0.d]# lsK01dnsmasq K20nfs K74haldaemon K89dundK01smartd K20rwhod K74lvm2-monitor K89hiddK02avahi-daemon K24irda K74nscd K89iscsiK02avahi-dnsconfd K25phpstudy K74ntpd K89iscsidK02NetworkManager K25squid K74rsyslog K89netplugdK02oddjobd K25sshd K75netfs K89pandK03yum-updatesd K30sendmail K85mdmonitor K89rdiscK05anacron K30spamassassin K85mdmpd K90bluetoothK05atd K35smb K85messagebus K90networkK05conman K35vncserver K85rpcgssd K91capiK05innd K35winbind K85rpcidmapd K91isdnK05jexec K44rawdevices K86nfslock K92ip6tablesK05saslauthd K50netconsole K87irqbalance K92iptablesK05wdaemon K50tux K87mcstrans K95firstbootK10cups K50vsftpd K87multipathd K95kudzuK10dc_server K50xinetd K87named K99cpuspeedK10hplip K60crond K87portmap K99microcode_ctlK10psacct K69rpcsvcgssd K87restorecond K99readahead_earlyK10tcsd K72autofs K88auditd K99readahead_laterK10xfs K73ipmi K88pcscd S00killallK12dc_client K73ypbind K88syslog S01haltK15gpm K74acpid K88wpa_supplicant 至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。 如何增加一个服务： 1.服务脚本必须存放在/etc/ini.d/目录下； 2.chkconfig –add servicename 在chkconfig工具服务列表中增加此服务，此时服务会被在/etc/rc.d/rcN.d中赋予K/S入口了； 3.chkconfig –level 345 mysqld on 修改服务的默认启动等级。 其他使用范例： chkconfig –list #列出所有的系统服务 chkconfig –del httpd #删除httpd服务 chkconfig –list mysqld #列出mysqld服务设置情况 chkconfig –level 35 mysqld on #设定mysqld在等级3和5为开机运行服务，–level 35表示操作只在等级3和5执行，on表示启动，off表示关闭 chkconfig mysqld on #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级 常见的守护进程有： amd：自动安装NFS守护进程 apmd:高级电源管理守护进程 arpwatch：记录日志并构建一个在LAN接口上看到的以太网地址和IP地址对数据库 autofs：自动安装管理进程automount，与NFS相关，依赖于NIS crond：Linux下的计划任务的守护进程 named：DNS服务器 netfs：安装NFS、Samba和NetWare网络文件系统 network：激活已配置网络接口的脚本程序 nfs：打开NFS服务 portmap：RPC portmap管理器，它管理基于RPC服务的连接 sendmail：邮件服务器sendmail smb：Samba文件共享/打印服务 syslog：一个让系统引导时起动syslog和klogd系统日志守候进程的脚本 xfs：X Window字型服务器，为本地和远程X服务器提供字型集 Xinetd：支持多种网络服务的核心守护进程，可以管理w\u000ftp、sshd、telnet等服务 这些守护进程也启动完成了，rc程序也就执行完了，然后又将返回init继续下一步。 ##5）用户自定义引导程序（/etc/rc.d/rc.local）一般来说，自定义的程序不需要执行上面所说的繁琐的建立shell增加链接文件的步骤，只需要将命令放在rc.local里面就可以了，这个shell脚本就是保留给用户自定义启动内容的。 ##6）启动终端和X-Window界面rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。通过按Alt+Fn(n对应1-6)可以在这6个终端中切换。在inittab中的以下6行就是定义了6个终端： 1:2345:respawn:/sbin/mingetty tty1 2:2345:respawn:/sbin/mingetty tty2 3:2345:respawn:/sbin/mingetty tty3 4:2345:respawn:/sbin/mingetty tty4 5:2345:respawn:/sbin/mingetty tty5 6:2345:respawn:/sbin/mingetty tty6 从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验 证用户的身份。 除了这6个之外还会执行”/etc/X11/prefdm -nodaemon”，这个主要启动X-Window，显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验 证用户的身份。 ##7）登录系统启动完成Runlevel 为5的图形方式用户登录，通过图形化的登录界面输入用户名和密码登录。登录后可以直接进入KDE、Gnome等窗口管理器。 文本方式登录： 当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。 Linux的账号验证程序是login，login接受mingetty传来的用户名作为用户名参数。然后login会对用户名进行分析：如果用户名 不是root，且存在/etc/nologin文件，login将输出nologin文件的内容，然后退出。这通常用来系统维护时防止非root用户登 录。只有/etc/securetty中登记了的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录。/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。 在分析完用户名后，login将搜索/etc/passwd以及/etc/shadow来验证密码以及设置账户的其它信息，比如：主目录是什么、使用何种shell。如果没有指定主目录，将默认为根目录；如果没有指定shell，将默认为/bin/bash。 login程序登录成功后，会向对应的终端再输出最近一次登录的信息（在/var/log/lastlog中有记录），并检查用户是否有新邮件(在/usr/spool/mail/的对应用户名目录下)。然后开始设置各种环境变量：对于bash来说，系统首先寻找/etc/profile脚本文件，并执行它；然后如果用户的主目录中存在.bash_profile文件，就执行它，在这些文件中又可能调用了其它配置文件，所有的配置文件执行后后，各种环境变量也设好了，这时会出现大家熟悉的命令行提示符，到此整个启动过程就结束了。","tags":[]}]